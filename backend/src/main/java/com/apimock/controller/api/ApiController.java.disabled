package com.apimock.controller.api;

import com.apimock.dto.ApiResponse;
import com.apimock.dto.api.CreateApiRequest;
import com.apimock.dto.api.UpdateApiRequest;
import com.apimock.dto.api.ApiResponseDto;
import com.apimock.entity.auth.User;
import com.apimock.service.api.ApiService;
import com.apimock.util.SecurityUtils;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/v1/apis")
@CrossOrigin(origins = "*")
public class ApiController {

    @Autowired
    private ApiService apiService;

    /**
     * 创建API接口
     */
    @PostMapping
    public ResponseEntity<ApiResponse<ApiResponseDto>> createApi(
            @Valid @RequestBody CreateApiRequest request) {

        try {
            User currentUser = SecurityUtils.getCurrentUser();
            ApiResponseDto response = apiService.createApi(request, currentUser);

            return ResponseEntity.status(HttpStatus.CREATED)
                    .body(ApiResponse.success("API接口创建成功", response));

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error(500, "创建API接口失败：" + e.getMessage()));
        }
    }

    /**
     * 获取API接口详情
     */
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<ApiResponseDto>> getApiById(@PathVariable Long id) {
        try {
            User currentUser = SecurityUtils.getCurrentUser();
            ApiResponseDto response = apiService.getApiById(id, currentUser);

            return ResponseEntity.ok(ApiResponse.success("获取API接口详情成功", response));

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error(500, "获取API接口详情失败：" + e.getMessage()));
        }
    }

    /**
     * 更新API接口
     */
    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<ApiResponseDto>> updateApi(
            @PathVariable Long id,
            @Valid @RequestBody UpdateApiRequest request) {

        try {
            User currentUser = SecurityUtils.getCurrentUser();
            ApiResponseDto response = apiService.updateApi(id, request, currentUser);

            return ResponseEntity.ok(ApiResponse.success("API接口更新成功", response));

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error(500, "更新API接口失败：" + e.getMessage()));
        }
    }

    /**
     * 删除API接口
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> deleteApi(@PathVariable Long id) {
        try {
            User currentUser = SecurityUtils.getCurrentUser();
            apiService.deleteApi(id, currentUser);

            return ResponseEntity.ok(ApiResponse.success("API接口删除成功"));

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error(500, "删除API接口失败：" + e.getMessage()));
        }
    }

    /**
     * 获取项目的API接口列表
     */
    @GetMapping
    public ResponseEntity<ApiResponse<Page<ApiResponseDto>>> getProjectApis(
            @RequestParam Long projectId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(defaultValue = "sortOrder") String sortBy,
            @RequestParam(defaultValue = "asc") String sortDir,
            @RequestParam(required = false) String keyword) {

        try {
            User currentUser = SecurityUtils.getCurrentUser();

            // 创建分页和排序参数
            Sort.Direction direction = "desc".equalsIgnoreCase(sortDir) ?
                    Sort.Direction.DESC : Sort.Direction.ASC;
            Pageable pageable = PageRequest.of(page, size, Sort.by(direction, sortBy));

            Page<ApiResponseDto> apis;
            if (keyword != null && !keyword.trim().isEmpty()) {
                // 搜索API
                apis = apiService.searchApis(projectId, keyword, currentUser, pageable);
            } else {
                // 获取项目所有API
                apis = apiService.getProjectApis(projectId, currentUser, pageable);
            }

            return ResponseEntity.ok(ApiResponse.success("获取API接口列表成功", apis));

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error(500, "获取API接口列表失败：" + e.getMessage()));
        }
    }

    /**
     * 获取分组的API接口列表
     */
    @GetMapping("/group/{groupId}")
    public ResponseEntity<ApiResponse<Page<ApiResponseDto>>> getGroupApis(
            @PathVariable Long groupId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(defaultValue = "sortOrder") String sortBy,
            @RequestParam(defaultValue = "asc") String sortDir) {

        try {
            User currentUser = SecurityUtils.getCurrentUser();

            // 创建分页和排序参数
            Sort.Direction direction = "desc".equalsIgnoreCase(sortDir) ?
                    Sort.Direction.DESC : Sort.Direction.ASC;
            Pageable pageable = PageRequest.of(page, size, Sort.by(direction, sortBy));

            Page<ApiResponseDto> apis = apiService.getGroupApis(groupId, currentUser, pageable);

            return ResponseEntity.ok(ApiResponse.success("获取分组API接口列表成功", apis));

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error(500, "获取分组API接口列表失败：" + e.getMessage()));
        }
    }

    /**
     * 检查API路径和方法的唯一性
     */
    @GetMapping("/check-uniqueness")
    public ResponseEntity<ApiResponse<Boolean>> checkApiUniqueness(
            @RequestParam Long projectId,
            @RequestParam String path,
            @RequestParam String method,
            @RequestParam(required = false) Long excludeApiId) {

        try {
            boolean isUnique = apiService.isApiPathAndMethodUnique(projectId, path, method, excludeApiId);
            String message = isUnique ? "API路径和方法可以使用" : "API路径和方法已存在";

            return ResponseEntity.ok(ApiResponse.success(message, isUnique));

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error(500, "检查API唯一性失败：" + e.getMessage()));
        }
    }

    /**
     * 批量删除API接口
     */
    @DeleteMapping("/batch")
    public ResponseEntity<ApiResponse<Void>> batchDeleteApis(@RequestBody List<Long> apiIds) {
        try {
            User currentUser = SecurityUtils.getCurrentUser();
            apiService.batchDeleteApis(apiIds, currentUser);

            return ResponseEntity.ok(ApiResponse.success("批量删除API接口成功"));

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error(500, "批量删除API接口失败：" + e.getMessage()));
        }
    }

    /**
     * 批量移动API接口到分组
     */
    @PutMapping("/batch/move")
    public ResponseEntity<ApiResponse<Void>> batchMoveApisToGroup(
            @RequestBody Map<String, Object> requestBody) {

        try {
            User currentUser = SecurityUtils.getCurrentUser();

            @SuppressWarnings("unchecked")
            List<Long> apiIds = (List<Long>) requestBody.get("apiIds");
            Long groupId = requestBody.get("groupId") != null ?
                    Long.valueOf(requestBody.get("groupId").toString()) : null;

            apiService.batchMoveApisToGroup(apiIds, groupId, currentUser);

            return ResponseEntity.ok(ApiResponse.success("批量移动API接口成功"));

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error(500, "批量移动API接口失败：" + e.getMessage()));
        }
    }

    /**
     * 更新API接口排序
     */
    @PutMapping("/{id}/sort")
    public ResponseEntity<ApiResponse<Void>> updateApiSortOrder(
            @PathVariable Long id,
            @RequestBody Map<String, Integer> requestBody) {

        try {
            User currentUser = SecurityUtils.getCurrentUser();
            Integer sortOrder = requestBody.get("sortOrder");

            apiService.updateApiSortOrder(id, sortOrder, currentUser);

            return ResponseEntity.ok(ApiResponse.success("更新API接口排序成功"));

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error(500, "更新API接口排序失败：" + e.getMessage()));
        }
    }

    /**
     * 复制API接口
     */
    @PostMapping("/{id}/copy")
    public ResponseEntity<ApiResponse<ApiResponseDto>> copyApi(
            @PathVariable Long id,
            @RequestBody Map<String, String> requestBody) {

        try {
            User currentUser = SecurityUtils.getCurrentUser();
            String newName = requestBody.get("newName");

            ApiResponseDto response = apiService.copyApi(id, newName, currentUser);

            return ResponseEntity.ok(ApiResponse.success("复制API接口成功", response));

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error(500, "复制API接口失败：" + e.getMessage()));
        }
    }

    /**
     * 获取API接口统计信息
     */
    @GetMapping("/statistics")
    public ResponseEntity<ApiResponse<Object>> getApiStatistics(@RequestParam Long projectId) {
        try {
            User currentUser = SecurityUtils.getCurrentUser();
            Object statistics = apiService.getApiStatistics(projectId, currentUser);

            return ResponseEntity.ok(ApiResponse.success("获取API统计信息成功", statistics));

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error(500, "获取API统计信息失败：" + e.getMessage()));
        }
    }
}